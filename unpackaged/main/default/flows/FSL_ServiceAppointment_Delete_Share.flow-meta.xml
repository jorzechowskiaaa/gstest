<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>59.0</apiVersion>
    <areMetricsLoggedToDataCloud>false</areMetricsLoggedToDataCloud>
    <decisions>
        <name>Check_for_Bypass</name>
        <label>Check for Flow Bypass</label>
        <locationX>176</locationX>
        <locationY>323</locationY>
        <defaultConnector>
            <targetReference>Is_Territory_Changed</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Run Flow</defaultConnectorLabel>
        <rules>
            <name>Bypass_Flow</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Permission.Skip_Sharing_Flow</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <label>Bypass Flow</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_if_New_Public_Group_exists</name>
        <label>Check if New Public Group exists</label>
        <locationX>412</locationX>
        <locationY>1163</locationY>
        <defaultConnector>
            <targetReference>Is_Service_Resource_Changed</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>Yes_PG</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_New_Public_Group.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Check_Existing_Share_record_New_Group</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_if_Share_Already_Exists</name>
        <label>Check if Share Already Exists</label>
        <locationX>159</locationX>
        <locationY>3287</locationY>
        <defaultConnector>
            <targetReference>Create_SA_Share</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>SA_Share_Exist</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Check_Existing_Share_record</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <label>SA Share Exist</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_if_Share_Already_Exists_NewGroup</name>
        <label>Check if Share Already Exists</label>
        <locationX>236</locationX>
        <locationY>1487</locationY>
        <defaultConnector>
            <targetReference>Create_SA_Share_NewGroup</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>SA_Share_Exist_NewGroup</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Check_Existing_Share_record_New_Group.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Is_Service_Resource_Changed</targetReference>
            </connector>
            <label>SA Share Exist</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_if_share_exists_with_Previous_user</name>
        <label>Check if share exists with Previous user</label>
        <locationX>511</locationX>
        <locationY>2279</locationY>
        <defaultConnector>
            <targetReference>Get_existing_WO_share_records_with_Old_User</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Exists_Previous_User</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_existing_Share_Records_with_Old_User.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Delete_Share</targetReference>
            </connector>
            <label>Exists</label>
        </rules>
    </decisions>
    <decisions>
        <name>Check_if_WO_order_share_exists</name>
        <label>Check if WO share exists</label>
        <locationX>511</locationX>
        <locationY>2687</locationY>
        <defaultConnector>
            <targetReference>Is_Service_Resource_not_null</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Exists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_existing_WO_share_records_with_Old_User.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Delete_WO_Shares</targetReference>
            </connector>
            <label>Exists</label>
        </rules>
    </decisions>
    <decisions>
        <name>If_Changed_from_Null_to_Other_User</name>
        <label>If Changed from Null to Other User</label>
        <locationX>357</locationX>
        <locationY>2063</locationY>
        <defaultConnector>
            <targetReference>Get_existing_Share_Records_with_Old_User</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_Changed_from_Null_to_User</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record__Prior.Service_Resource__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Is_Service_Resource_not_null</targetReference>
            </connector>
            <label>Yes, Changed from Null to User</label>
        </rules>
    </decisions>
    <decisions>
        <name>If_existing_Share_exists</name>
        <label>If existing Share with Previous Group exists</label>
        <locationX>412</locationX>
        <locationY>755</locationY>
        <defaultConnector>
            <targetReference>Get_New_Public_Group</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_Existing_share</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_existing_Share_Record_with_Previous_Group.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Delete_previous_Share_Records</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_Service_Resource_Changed</name>
        <label>Is Service Resource Changed</label>
        <locationX>588</locationX>
        <locationY>1955</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_Resource_Changed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Service_Resource__r.Id</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>If_Changed_from_Null_to_Other_User</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_Service_Resource_not_null</name>
        <label>Is New Service Resource not null</label>
        <locationX>357</locationX>
        <locationY>3071</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_Not_Null</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Service_Resource__r.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Check_Existing_Share_record</targetReference>
            </connector>
            <label>Not Null</label>
        </rules>
    </decisions>
    <decisions>
        <description>Is Territory changed when Service Resource got changed</description>
        <name>Is_Territory_Changed</name>
        <label>Is Territory Changed</label>
        <locationX>588</locationX>
        <locationY>431</locationY>
        <defaultConnector>
            <targetReference>Is_Service_Resource_Changed</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>Yes</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.ServiceTerritoryId</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_previous_Public_Group</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <environments>Default</environments>
    <interviewLabel>FSL - ServiceAppointment - Delete Share {!$Flow.CurrentDateTime}</interviewLabel>
    <label>FSL - ServiceAppointment - Update Share</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <name>Create_SA_Share</name>
        <label>Create SA Share</label>
        <locationX>291</locationX>
        <locationY>3395</locationY>
        <connector>
            <targetReference>Create_WO_Share</targetReference>
        </connector>
        <inputAssignments>
            <field>AccessLevel</field>
            <value>
                <stringValue>Edit</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ParentId</field>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RowCause</field>
            <value>
                <stringValue>Manual</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>UserOrGroupId</field>
            <value>
                <elementReference>$Record.Service_Resource__r.RelatedRecord.Id</elementReference>
            </value>
        </inputAssignments>
        <object>ServiceAppointmentShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordCreates>
        <name>Create_SA_Share_NewGroup</name>
        <label>Create SA Share with New Group</label>
        <locationX>324</locationX>
        <locationY>1595</locationY>
        <connector>
            <targetReference>Is_Service_Resource_Changed</targetReference>
        </connector>
        <inputAssignments>
            <field>AccessLevel</field>
            <value>
                <stringValue>Edit</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ParentId</field>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RowCause</field>
            <value>
                <stringValue>Manual</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>UserOrGroupId</field>
            <value>
                <elementReference>Get_New_Public_Group.Id</elementReference>
            </value>
        </inputAssignments>
        <object>ServiceAppointmentShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordCreates>
        <name>Create_WO_Share</name>
        <label>Create WO Share</label>
        <locationX>291</locationX>
        <locationY>3503</locationY>
        <inputAssignments>
            <field>AccessLevel</field>
            <value>
                <stringValue>Edit</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ParentId</field>
            <value>
                <elementReference>$Record.Work_Order__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RowCause</field>
            <value>
                <stringValue>Manual</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>UserOrGroupId</field>
            <value>
                <elementReference>$Record.Service_Resource__r.RelatedRecordId</elementReference>
            </value>
        </inputAssignments>
        <object>WorkOrderShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordCreates>
        <name>CreateWOShare</name>
        <label>CreateWOShare</label>
        <locationX>236</locationX>
        <locationY>1379</locationY>
        <connector>
            <targetReference>Check_if_Share_Already_Exists_NewGroup</targetReference>
        </connector>
        <inputAssignments>
            <field>AccessLevel</field>
            <value>
                <stringValue>Edit</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ParentId</field>
            <value>
                <elementReference>$Record.ParentRecordId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>RowCause</field>
            <value>
                <stringValue>Manual</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>UserOrGroupId</field>
            <value>
                <elementReference>Get_New_Public_Group.Id</elementReference>
            </value>
        </inputAssignments>
        <object>WorkOrderShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordDeletes>
        <name>Delete_previous_Share_Records</name>
        <label>Delete previous Share Records</label>
        <locationX>280</locationX>
        <locationY>863</locationY>
        <connector>
            <targetReference>Get_New_Public_Group</targetReference>
        </connector>
        <inputReference>Get_existing_Share_Record_with_Previous_Group</inputReference>
    </recordDeletes>
    <recordDeletes>
        <name>Delete_Share</name>
        <label>Delete Share</label>
        <locationX>379</locationX>
        <locationY>2387</locationY>
        <connector>
            <targetReference>Get_existing_WO_share_records_with_Old_User</targetReference>
        </connector>
        <inputReference>Get_existing_Share_Records_with_Old_User</inputReference>
    </recordDeletes>
    <recordDeletes>
        <name>Delete_WO_Shares</name>
        <label>Delete WO Shares</label>
        <locationX>379</locationX>
        <locationY>2795</locationY>
        <connector>
            <targetReference>Is_Service_Resource_not_null</targetReference>
        </connector>
        <inputReference>Get_existing_WO_share_records_with_Old_User</inputReference>
    </recordDeletes>
    <recordLookups>
        <name>Check_Existing_Share_record</name>
        <label>Check Existing Share record with new User</label>
        <locationX>159</locationX>
        <locationY>3179</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Check_if_Share_Already_Exists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Service_Resource__r.RelatedRecord.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>ParentId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ServiceAppointmentShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Check_Existing_Share_record_New_Group</name>
        <label>Check Existing Share record</label>
        <locationX>236</locationX>
        <locationY>1271</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CreateWOShare</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_New_Public_Group.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>ParentId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ServiceAppointmentShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_existing_Share_Record_with_Previous_Group</name>
        <label>Get existing Share Record with Previous Group</label>
        <locationX>412</locationX>
        <locationY>647</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>If_existing_Share_exists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>ParentId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_previous_Public_Group.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ServiceAppointmentShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_existing_Share_Records_with_Old_User</name>
        <label>Get existing Share Records with Old User</label>
        <locationX>511</locationX>
        <locationY>2171</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Check_if_share_exists_with_Previous_user</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>ParentId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record__Prior.Service_Resource__r.RelatedRecord.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ServiceAppointmentShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_existing_WO_share_records_with_Old_User</name>
        <label>Get existing WO share records with Old User</label>
        <locationX>511</locationX>
        <locationY>2579</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Check_if_WO_order_share_exists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>ParentId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Work_Order__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record__Prior.Service_Resource__r.RelatedRecord.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>WorkOrderShare</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_New_Public_Group</name>
        <label>Get New Public Group</label>
        <locationX>412</locationX>
        <locationY>1055</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Check_if_New_Public_Group_exists</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.ServiceTerritory.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_previous_Public_Group</name>
        <label>Get previous Public Group</label>
        <locationX>412</locationX>
        <locationY>539</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_existing_Share_Record_with_Previous_Group</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record__Prior.ServiceTerritory.Name</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <start>
        <locationX>50</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Check_for_Bypass</targetReference>
        </connector>
        <filterLogic>or</filterLogic>
        <filters>
            <field>Service_Resource__c</field>
            <operator>IsChanged</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <filters>
            <field>ServiceTerritoryId</field>
            <operator>IsChanged</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <object>ServiceAppointment</object>
        <recordTriggerType>Update</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Obsolete</status>
</Flow>
